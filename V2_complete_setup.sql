
-- ==============================================================================================
-- FINAL & COMPLETE SUPABASE DATABASE SETUP
-- Version: 2.0
-- Description: This single script handles the entire database setup from a clean slate.
-- It creates all necessary tables, functions, and relationships for the AI companion application.
-- Instructions: Copy this entire script into your Supabase SQL Editor and run it once.
-- ==============================================================================================

-- STEP 1: PREPARE THE ENVIRONMENT
-- Drop all existing tables in the correct order to avoid dependency issues.
DROP TABLE IF EXISTS "messages_log" CASCADE;
DROP TABLE IF EXISTS "ad_settings" CASCADE;
DROP TABLE IF EXISTS "chat_contexts" CASCADE;
DROP FUNCTION IF EXISTS "trigger_set_timestamp" CASCADE;

-- Enable necessary extensions if they are not already enabled.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- STEP 2: CREATE THE MAIN USER CONTEXT TABLE
-- This is the most important table. It stores all user-specific data, including memories,
-- relationship status, chat streaks, and more, making it the core of the AI's personalization.
CREATE TABLE IF NOT EXISTS "chat_contexts" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" TEXT UNIQUE NOT NULL,
    "session_id" TEXT,
    
    -- AI Memory & Personality
    "context_data" JSONB DEFAULT '{}'::jsonb,      -- For long-term user memories (e.g., name, likes)
    "personality_state" JSONB DEFAULT '{}'::jsonb, -- For the AI's own narrative with this user

    -- Relationship & Addiction Engine
    "relationship_level" TEXT DEFAULT 'new_user' NOT NULL,
    "chat_streak" INTEGER DEFAULT 0 NOT NULL,
    "last_chat_date" DATE,
    "nickname" TEXT,

    -- Timestamps
    "created_at" TIMESTAMPTZ DEFAULT NOW(),
    "last_updated" TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE "chat_contexts" IS 'The core table for storing all user-specific AI memories and relationship data.';
COMMENT ON COLUMN "chat_contexts"."context_data" IS 'Stores key facts about the user recalled by the AI.';
COMMENT ON COLUMN "chat_contexts"."relationship_level" IS 'Tracks the bond: new_user, familiar, attached, bestie.';
COMMENT ON COLUMN "chat_contexts"."chat_streak" IS 'Counts consecutive days of chatting to build a daily habit.';

-- STEP 3: CREATE THE ADVERTISEMENT SETTINGS TABLE
-- A single table to control all monetization settings globally.
CREATE TABLE IF NOT EXISTS "ad_settings" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "setting_name" TEXT UNIQUE NOT NULL,
    "is_enabled" BOOLEAN DEFAULT TRUE,
    "value" TEXT,
    "last_updated" TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE "ad_settings" IS 'Global configuration for all ad networks and types (Pop-under, Direct Links, etc.).';

-- Insert default ad settings (you can change the "value" later in the Supabase dashboard)
INSERT INTO "ad_settings" (setting_name, is_enabled, value) VALUES
    ('adsterra_direct_link_enabled', TRUE, 'YOUR_ADSTERRA_DIRECT_LINK_HERE'),
    ('adsterra_popunder_enabled', TRUE, 'POP_UNDER_SCRIPT_OR_ID'),
    ('adsterra_social_bar_enabled', TRUE, 'SOCIAL_BAR_SCRIPT_OR_ID')
ON CONFLICT (setting_name) DO NOTHING;


-- STEP 4: CREATE A LOGGING TABLE (OPTIONAL BUT RECOMMENDED)
-- For analytics and debugging, this table can log messages.
-- NOTE: Can be disabled in a production environment to save costs.
CREATE TABLE IF NOT EXISTS "messages_log" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" TEXT,
    "message_text" TEXT,
    "sender" TEXT, -- 'user' or 'ai'
    "created_at" TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE "messages_log" IS 'Optional log of all messages for analytics and debugging.';

-- STEP 5: CREATE AUTOMATIC TIMESTAMP UPDATE FUNCTION
-- This function automatically updates the "last_updated" column on any change.
CREATE OR REPLACE FUNCTION "trigger_set_timestamp"()
RETURNS TRIGGER AS $$
BEGIN
  NEW.last_updated = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to the tables that need it.
CREATE TRIGGER set_timestamp_chat_contexts
BEFORE UPDATE ON "chat_contexts"
FOR EACH ROW
EXECUTE FUNCTION "trigger_set_timestamp"();

CREATE TRIGGER set_timestamp_ad_settings
BEFORE UPDATE ON "ad_settings"
FOR EACH ROW
EXECUTE FUNCTION "trigger_set_timestamp"();

-- STEP 6: SETUP ROW-LEVEL SECURITY (RECOMMENDED FOR PRODUCTION)
-- These basic policies protect your data. You can make them more restrictive if needed.
ALTER TABLE "chat_contexts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "ad_settings" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "messages_log" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read for all" ON "ad_settings" FOR SELECT USING (true);
CREATE POLICY "Allow individual access to context" ON "chat_contexts" FOR ALL USING (auth.uid()::text = user_id);
CREATE POLICY "Allow individual access to logs" ON "messages_log" FOR ALL USING (auth.uid()::text = user_id);

-- ==============================================================================================
-- DATABASE SETUP COMPLETE
-- You can now proceed with your application.
-- ==============================================================================================
